UZU Roaster（うずロースター）取扱説明書
📦 製品概要
うずロースターは、小型のコーヒー焙煎機や手鍋に接続して、温度センサのデータを取得、Artisan
やうずロースター内臓のWebページ（うずロースターコントローラー）上で表示し、焙煎をアシストするIoTデバイスです。
スマホやPCからWi-Fiで接続し、温度を測定したり、設定を変更したりできます。

主な機能は以下の通りです。
・温度情報をUSBシリアルでPCに転送し、Artizanで表示
・温度情報をうずロースターコントローラーで表示、コントロール
・WiFiスポット、Webサーバー機能でユーザー作成のWebページを表示
・3Dプリンターに接続して焙煎コントロール（Version2.0）
・小型焙煎機に接続して温度コントロール（Version3.0）
・ロボットアームに接続して焙煎コントロール（Version4.0）

🔧 初期設定方法
① 起動と接続
ESP32をUSB電源に接続すると、自動で起動する。

デフォルトでは Wi-Fiアクセスポイントモード で起動し、SSIDは UZU-ROASTER、パスワードは 00000000 になっている。

スマホやPCからこのSSIDに接続すると、自動的に設定ページにリダイレクトされる！（※キャプティブポータル対応）

② ブラウザでアクセス
一部のPC、スマホ等でキャプティブポータルが対応していない場合、SSIDに接続後、任意のブラウザ（※1）でうずロースターのWebページにアクセスする。
（※1）Chrome、Edge等

IPアドレス: http://192.168.4.1

このページから温度の確認、各種コマンド送信、セッティングができる。

💬 Webシリアルコマンド一覧
WebSerial もしくは USBシリアル通信経由で、以下のコマンドを送信できる！

コマンド	内容
temp on	温度表示をONにする
temp off	温度表示をOFFにする
interval 1000	温度取得の間隔を1000msに設定する
reset	各種設定を初期化＆ESP32を再起動する
wifi on/off	Wi-FiをONまたはOFFに切り替える
ssid	現在のSSIDを表示する
password	現在のWi-Fiパスワードを表示する
ssid 新SSID名	Wi-FiのSSIDを変更して再起動する
password 新パスワード	Wi-Fiのパスワードを変更して再起動する

📈 温度センサと表示の仕様
センサ：Adafruit MAX31855 使用（K型熱電対）

平均化：移動平均（10点、最大最小2点ずつ除外）

表示：小数第1位まで（設定可能）

更新間隔：デフォルト500ms（コマンドで変更可能）

💤 省電力モード
ESP32は低クロック（80MHz）で動作しており、省電力設計になってる。

Bluetoothは自動で停止するので安心。

📁 Web画面（LittleFS）
ESP32内のLittleFSに配置されたHTML/CSS/JSがWeb画面として表示される。

ファイル構成例：

/index.html

/style.css

/script.js

※更新する場合は、Arduino IDEの「データフォルダをアップロード」機能を使う！

📌 注意事項
MAX31855は3.3V動作なので、5Vで駆動しないこと！

サーボモーターに負荷がかかりすぎるとESP32がリセットする可能性がある。

WebSerial使用時、USBシリアルと排他的になる場合があるので注意！

💡 こんなときは？
問題	対処法
Web画面が表示されない	192.168.4.1 に直接アクセスしてみる
温度が「nan」や「0.0」と出る	熱電対の接続が抜けてないか確認する
設定をすべて初期化したい	reset コマンドを送信する
Wi-Fi接続後に見失った場合	シリアルモニタでIPアドレスを確認する

👨‍🔧 メンテナンス情報（開発者向け）
ソースコードはArduinoベース（ESP32用ボード選択）

温度センサのロジックは ReadTempTask() でFreeRTOS Taskとして実行

Preferencesライブラリで設定値を永続保存

🧪 開発協力・お問い合わせ
「うずロースター」を使って何か面白いこと思いついたら、ぜひ開発者に連絡して欲しい！
※GitHub、X（旧Twitter）などで共有してくれると嬉しい！




UZU Roaster × Artisan 連携マニュアル【USB接続編】
💡 このマニュアルでできること
このマニュアルでは、うずロースター（ESP32）をArtisanに温度ロガーとして接続する手順を説明する。
温度表示・記録・プロファイルの作成など、焙煎ログ管理が超快適になる！

🧰 必要なもの
焙煎用温度センサ（MAX31855＋K型熱電対）

ESP32（USB接続できるモデル）

PC（Windows/macOS/Linux）

Artisan（最新版が望ましい）
👉 公式サイト

USBケーブル（ESP32とPCをつなぐ）

🔌 ① ESP32側の準備
ESP32には以下のような機能が実装されている必要がある：

USBシリアル通信で温度を定期的に出力する
例：25.3\n のように1行1温度、改行付きで送信

データ形式は1chまたは2chでArtisanが読める形式

単一チャンネル: 25.3

複数チャンネル: 25.3;40.1

🧪 例：あなたのコードでは Serial.println(temperature, 1); でOK！

⚙️ ② Artisanの設定手順
Artisanを起動

メニューから
「設定」→「デバイス」 を開く

📌 デバイス設定（シリアルポート）
項目	設定値
デバイス	Generic → MODBUS or Serial を選択
ポート	COMポート（例：COM5や/dev/ttyUSB0）
ボーレート	115200（ESP32側と合わせる）
プロトコル	Serial を選択

📌 スクリプト設定（Serial Protocol）
Artisanのメニューで
「設定 → スクリプト → シリアルポート読み取りスクリプト」を開く

以下の内容を貼り付ける：

python
コピーする
編集する
# 一行に温度1つだけ送られてくる場合
return float(input)

# 複数チャンネル（ET;BT）の場合
# et, bt = input.split(";")
# return float(bt), float(et)
※複数チャンネルのときは上の2行をアンコメントして使う！

✅ テスト＆確認
設定画面を閉じたら、上部ツールバーの【START】をクリック

グラフに温度がリアルタイムで表示されるはず！

🌡️ 温度が表示されないときのチェックポイント
チェック項目	対処法
ポートが見つからない	デバイスマネージャでCOMポート番号を確認
数字が「nan」や0.0ばかり	熱電対の接続ミス・センサが壊れてないか確認
グラフが止まってる	Artisanの「START」ボタンを押したか確認
データが読めない・エラーになる	改行形式（\n）が正しく送られてるか確認

🔁 応用編：無線（Wi-Fi）版 Artisan連携
将来的にはESP32をWi-Fiサーバー化してTCP接続でArtisanとつなぐことも可能。
それはまた別マニュアルで用意する！

🧾 最後に
Artisanと連携すれば、焙煎ログが宝の山になる！
温度変化を分析したり、再現性を高めたり、未来の“自動焙煎制御器”への第一歩になる！


🌐 UZU Roaster × WebSerial（ブラウザ焙煎ビューアー）接続マニュアル【追加】
💡 WebSerialとは？
WebSerialは、Google Chrome や Edge などのブラウザ上から、ESP32などのシリアルデバイス（USB接続）に直接アクセスできる技術。
つまり、PCに専用アプリやドライバを入れなくても、ブラウザだけで温度表示ができる！ 未来感あふれる方式よ〜。

🧪 必要な環境
項目	内容
ブラウザ	Google Chrome / Edge（WebSerial対応版）
接続方式	USBケーブル経由でESP32とPCを接続
ESP32側処理	Serial.print() で温度を定期送信（例：25.3\n）
アクセス　　http://192.168.4.1/webserial

